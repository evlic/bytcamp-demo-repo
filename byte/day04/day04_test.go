package day04

import "testing"

func TestDay04(t *testing.T) {
	// 1、
	// 通过查阅文档，发现 go test 指令执行中，为了加快编译速度，不同包的编译是并发执行的；
	// 但 test 内方法执行保障其串行化，才能尽可能的保证执行过程中不受其他任务的影响。
	// 调用 t.Parallel() 可提供一个信号量，执行时 该 test 下的任务可和其他被 Parallel 标记的任务并发执行。

	// 2、大文件分段读入
	/*
		【分布式文件处理，获取最多的 URL】
			如果有一个 20g 的日志文件，
			日志文件记录着用户访问过的 url，
			每一行为一个 url，
			给你一台 512M 的主机，
			找出出现次数最多的 10 个 url。
	*/
	// 采用 readLine 从文件系统中一行一行读入内存中开辟的一片缓冲区, 限制 maxLine
	// 当达到 maxLine 执行一次计数操作, 通过 k-v 建立 map 映射；
	// 将此 map 中的 TopK 尝试加入到全局 TopK 堆中。
	// 重置缓冲区
	// 重复步骤直到文件被读取完成, TopK 堆中剩下则是本题所找的答案。

	// 内存分析
	// 	分块数:
	//	20G / maxLine ,一行如果有 255.255.255.255 长度为 15+1 的字符串 2 * 16 byte = 2 ^ 5
	// 	约有	20 * 2 ^ 30 / 2 ^ (5+4) = 20 * 2 ^ 21 行
	// 	硬件机器有 512 M 物理内存, 2＾29bit 限制缓冲区为 32M 的话 2＾25bit
	//  预估分块数为 2 ＾ 5 块, 每块 20 * 2 ＾ 16 行, 可以看作近似  2 ＾ 21 行
	// 所以我的实现方案是认为分为 32 块, 分别统计 topK, 然后合并到 topK 中。生成最后的结果
}
